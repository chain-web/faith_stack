// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "eval_result.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message EvalResult
 */
export interface EvalResult {
    /**
     * @generated from protobuf field: repeated string cu_cost = 1;
     */
    cuCost: string[];
    /**
     * @generated from protobuf field: string func_result = 2;
     */
    funcResult: string;
    /**
     * @generated from protobuf field: bytes storage = 3;
     */
    storage: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class EvalResult$Type extends MessageType<EvalResult> {
    constructor() {
        super("EvalResult", [
            { no: 1, name: "cu_cost", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "func_result", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "storage", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<EvalResult>): EvalResult {
        const message = { cuCost: [], funcResult: "", storage: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EvalResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EvalResult): EvalResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string cu_cost */ 1:
                    message.cuCost.push(reader.string());
                    break;
                case /* string func_result */ 2:
                    message.funcResult = reader.string();
                    break;
                case /* bytes storage */ 3:
                    message.storage = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EvalResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string cu_cost = 1; */
        for (let i = 0; i < message.cuCost.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.cuCost[i]);
        /* string func_result = 2; */
        if (message.funcResult !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.funcResult);
        /* bytes storage = 3; */
        if (message.storage.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.storage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EvalResult
 */
export const EvalResult = new EvalResult$Type();
