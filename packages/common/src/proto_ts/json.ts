// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "json.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message SerdeItem
 */
export interface SerdeItem {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "stringValue";
        /**
         * @generated from protobuf field: string string_value = 2;
         */
        stringValue: string;
    } | {
        oneofKind: "boolValue";
        /**
         * @generated from protobuf field: bool bool_value = 3;
         */
        boolValue: boolean;
    } | {
        oneofKind: "doubleValue";
        /**
         * @generated from protobuf field: double double_value = 4;
         */
        doubleValue: number;
    } | {
        oneofKind: "bigintValue";
        /**
         * @generated from protobuf field: string bigint_value = 5;
         */
        bigintValue: string;
    } | {
        oneofKind: "bytesValue";
        /**
         * @generated from protobuf field: bytes bytes_value = 6;
         */
        bytesValue: Uint8Array;
    } | {
        oneofKind: "arrayValue";
        /**
         * @generated from protobuf field: SerdeArray array_value = 7;
         */
        arrayValue: SerdeArray;
    } | {
        oneofKind: "objectValue";
        /**
         * @generated from protobuf field: SerdeObject object_value = 8;
         */
        objectValue: SerdeObject;
    } | {
        oneofKind: "nullValue";
        /**
         * @generated from protobuf field: bool null_value = 9;
         */
        nullValue: boolean;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message SerdeObject
 */
export interface SerdeObject {
    /**
     * @generated from protobuf field: repeated SerdeItem fields = 1;
     */
    fields: SerdeItem[];
}
/**
 * @generated from protobuf message SerdeArray
 */
export interface SerdeArray {
    /**
     * @generated from protobuf field: repeated SerdeItem items = 1;
     */
    items: SerdeItem[];
}
// @generated message type with reflection information, may provide speed optimized methods
class SerdeItem$Type extends MessageType<SerdeItem> {
    constructor() {
        super("SerdeItem", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "string_value", kind: "scalar", oneof: "value", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bool_value", kind: "scalar", oneof: "value", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "double_value", kind: "scalar", oneof: "value", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "bigint_value", kind: "scalar", oneof: "value", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "bytes_value", kind: "scalar", oneof: "value", T: 12 /*ScalarType.BYTES*/ },
            { no: 7, name: "array_value", kind: "message", oneof: "value", T: () => SerdeArray },
            { no: 8, name: "object_value", kind: "message", oneof: "value", T: () => SerdeObject },
            { no: 9, name: "null_value", kind: "scalar", oneof: "value", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SerdeItem>): SerdeItem {
        const message = { key: "", value: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SerdeItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SerdeItem): SerdeItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string string_value */ 2:
                    message.value = {
                        oneofKind: "stringValue",
                        stringValue: reader.string()
                    };
                    break;
                case /* bool bool_value */ 3:
                    message.value = {
                        oneofKind: "boolValue",
                        boolValue: reader.bool()
                    };
                    break;
                case /* double double_value */ 4:
                    message.value = {
                        oneofKind: "doubleValue",
                        doubleValue: reader.double()
                    };
                    break;
                case /* string bigint_value */ 5:
                    message.value = {
                        oneofKind: "bigintValue",
                        bigintValue: reader.string()
                    };
                    break;
                case /* bytes bytes_value */ 6:
                    message.value = {
                        oneofKind: "bytesValue",
                        bytesValue: reader.bytes()
                    };
                    break;
                case /* SerdeArray array_value */ 7:
                    message.value = {
                        oneofKind: "arrayValue",
                        arrayValue: SerdeArray.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).arrayValue)
                    };
                    break;
                case /* SerdeObject object_value */ 8:
                    message.value = {
                        oneofKind: "objectValue",
                        objectValue: SerdeObject.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).objectValue)
                    };
                    break;
                case /* bool null_value */ 9:
                    message.value = {
                        oneofKind: "nullValue",
                        nullValue: reader.bool()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SerdeItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string string_value = 2; */
        if (message.value.oneofKind === "stringValue")
            writer.tag(2, WireType.LengthDelimited).string(message.value.stringValue);
        /* bool bool_value = 3; */
        if (message.value.oneofKind === "boolValue")
            writer.tag(3, WireType.Varint).bool(message.value.boolValue);
        /* double double_value = 4; */
        if (message.value.oneofKind === "doubleValue")
            writer.tag(4, WireType.Bit64).double(message.value.doubleValue);
        /* string bigint_value = 5; */
        if (message.value.oneofKind === "bigintValue")
            writer.tag(5, WireType.LengthDelimited).string(message.value.bigintValue);
        /* bytes bytes_value = 6; */
        if (message.value.oneofKind === "bytesValue")
            writer.tag(6, WireType.LengthDelimited).bytes(message.value.bytesValue);
        /* SerdeArray array_value = 7; */
        if (message.value.oneofKind === "arrayValue")
            SerdeArray.internalBinaryWrite(message.value.arrayValue, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* SerdeObject object_value = 8; */
        if (message.value.oneofKind === "objectValue")
            SerdeObject.internalBinaryWrite(message.value.objectValue, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bool null_value = 9; */
        if (message.value.oneofKind === "nullValue")
            writer.tag(9, WireType.Varint).bool(message.value.nullValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SerdeItem
 */
export const SerdeItem = new SerdeItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SerdeObject$Type extends MessageType<SerdeObject> {
    constructor() {
        super("SerdeObject", [
            { no: 1, name: "fields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SerdeItem }
        ]);
    }
    create(value?: PartialMessage<SerdeObject>): SerdeObject {
        const message = { fields: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SerdeObject>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SerdeObject): SerdeObject {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated SerdeItem fields */ 1:
                    message.fields.push(SerdeItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SerdeObject, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated SerdeItem fields = 1; */
        for (let i = 0; i < message.fields.length; i++)
            SerdeItem.internalBinaryWrite(message.fields[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SerdeObject
 */
export const SerdeObject = new SerdeObject$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SerdeArray$Type extends MessageType<SerdeArray> {
    constructor() {
        super("SerdeArray", [
            { no: 1, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SerdeItem }
        ]);
    }
    create(value?: PartialMessage<SerdeArray>): SerdeArray {
        const message = { items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SerdeArray>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SerdeArray): SerdeArray {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated SerdeItem items */ 1:
                    message.items.push(SerdeItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SerdeArray, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated SerdeItem items = 1; */
        for (let i = 0; i < message.items.length; i++)
            SerdeItem.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SerdeArray
 */
export const SerdeArray = new SerdeArray$Type();
